import secrets
import re
import string
from datetime import datetime
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import os

def validar_contrasena(password, longitud_minima=10):
    """
    Valida que la contrase√±a tenga la longitud m√≠nima especificada
    """
    if len(password) < longitud_minima:
        return False, f"‚ùå La contrase√±a debe tener al menos {longitud_minima} caracteres"
    
    return True, f"‚úÖ Contrase√±a v√°lida ({len(password)} caracteres)"

def generar_contrasena():
    """
    Genera una contrase√±a con variedad de caracteres
    Longitud por defecto: 15 caracteres
    """
    return generar_contrasena_personalizada(15)

def generar_contrasena_personalizada(longitud):
    """
    Genera una contrase√±a con longitud personalizada
    Incluye may√∫sculas, min√∫sculas, n√∫meros y s√≠mbolos para m√°xima compatibilidad
    """
    # Caracteres disponibles
    mayusculas = string.ascii_uppercase  # A-Z
    minusculas = string.ascii_lowercase  # a-z
    simbolos = ['*', '+', '-', '/', '@', '_', '?', '!', ';', '.', '>', '<', '~', '¬∞', '^', '&', '$', '#']
    numeros = string.digits  # 0-9

    # Todos los caracteres disponibles
    todos_caracteres = list(mayusculas) + list(minusculas) + simbolos + list(numeros)
    
    # Generar contrase√±a completamente aleatoria
    contrasena = []
    for i in range(longitud):
        caracter_random = secrets.choice(todos_caracteres)
        contrasena.append(caracter_random)
    
    return "".join(contrasena)


class GeneradorContrasenaGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("üîê Generador de Contrase√±as Flexibles")
        self.root.geometry("600x650")
        self.root.resizable(False, False)
        
        # Variable para la ruta seleccionada
        self.ruta_seleccionada = tk.StringVar()
        self.ruta_seleccionada.set(os.path.join(os.path.expanduser("~"), "Desktop"))  # Escritorio por defecto
        
        self.crear_interfaz()
    
    def crear_interfaz(self):
        # Frame principal
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # T√≠tulo
        titulo = ttk.Label(main_frame, text="üîê GENERADOR DE CONTRASE√ëAS", 
                          font=("Arial", 16, "bold"))
        titulo.grid(row=0, column=0, columnspan=2, pady=(0, 20))
        
        # Informaci√≥n general
        info_frame = ttk.LabelFrame(main_frame, text="‚ÑπÔ∏è Informaci√≥n", padding="10")
        info_frame.grid(row=1, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 20))
        
        info_texto = "‚Ä¢ Genera contrase√±as con variedad de caracteres\n‚Ä¢ Validaci√≥n √∫nicamente por longitud\n"
        ttk.Label(info_frame, text=info_texto, font=("Arial", 10)).grid(row=0, column=0, sticky=tk.W)
        
        # Configuraci√≥n de longitud
        config_frame = ttk.LabelFrame(main_frame, text="‚öôÔ∏è Configuraci√≥n", padding="10")
        config_frame.grid(row=2, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 20))
        
        ttk.Label(config_frame, text="Longitud de contrase√±a:").grid(row=0, column=0, sticky=tk.W)
        self.longitud_var = tk.IntVar(value=15)
        longitud_spinbox = ttk.Spinbox(config_frame, from_=10, to=50, width=10, textvariable=self.longitud_var)
        longitud_spinbox.grid(row=0, column=1, padx=(10, 0), sticky=tk.W)
        
        # Selecci√≥n de ruta
        ruta_frame = ttk.LabelFrame(main_frame, text="üìÅ Ruta de Guardado", padding="10")
        ruta_frame.grid(row=3, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 20))
        
        ttk.Label(ruta_frame, text="Ruta actual:").grid(row=0, column=0, sticky=tk.W)
        ruta_entry = ttk.Entry(ruta_frame, textvariable=self.ruta_seleccionada, width=50, state="readonly")
        ruta_entry.grid(row=1, column=0, pady=(5, 0), sticky=(tk.W, tk.E))
        
        ttk.Button(ruta_frame, text="üìÇ Seleccionar Ruta", 
                  command=self.seleccionar_ruta).grid(row=1, column=1, padx=(10, 0), pady=(5, 0))
        
        # Bot√≥n generar
        generar_btn = ttk.Button(main_frame, text="üîë Generar Contrase√±a", 
                               command=self.generar_y_guardar, style="Accent.TButton")
        generar_btn.grid(row=4, column=0, columnspan=2, pady=(0, 20))
        
        # Resultado
        resultado_frame = ttk.LabelFrame(main_frame, text="üîç Resultado", padding="10")
        resultado_frame.grid(row=5, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 20))
        
        # Campo de texto para mostrar la contrase√±a - Ajustado para mostrar todo
        self.resultado_text = tk.Text(resultado_frame, height=12, width=70, wrap=tk.WORD, 
                                     font=("Consolas", 9), state=tk.DISABLED)
        self.resultado_text.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Scrollbar para el texto
        scrollbar = ttk.Scrollbar(resultado_frame, orient=tk.VERTICAL, command=self.resultado_text.yview)
        scrollbar.grid(row=0, column=2, sticky=(tk.N, tk.S))
        self.resultado_text.configure(yscrollcommand=scrollbar.set)
        
        # Configurar el grid para que se expanda
        resultado_frame.columnconfigure(0, weight=1)
        resultado_frame.rowconfigure(0, weight=1)
        
        # Botones adicionales
        botones_frame = ttk.Frame(main_frame)
        botones_frame.grid(row=6, column=0, columnspan=2, pady=(10, 0))
        
        ttk.Button(botones_frame, text="üìã Copiar Contrase√±a", 
                  command=self.copiar_contrasena).grid(row=0, column=0, padx=(0, 10))
        
        ttk.Button(botones_frame, text="üîÑ Nueva Contrase√±a", 
                  command=self.generar_y_guardar).grid(row=0, column=1, padx=(0, 10))
        
        ttk.Button(botones_frame, text="üìÇ Abrir Carpeta", 
                  command=self.abrir_carpeta).grid(row=0, column=2)
        
        # Variable para almacenar la √∫ltima contrase√±a generada
        self.ultima_contrasena = ""
    
    def seleccionar_ruta(self):
        """Abre un di√°logo para seleccionar la carpeta de guardado"""
        ruta = filedialog.askdirectory(
            title="Seleccionar carpeta para guardar la contrase√±a",
            initialdir=self.ruta_seleccionada.get()
        )
        if ruta:
            self.ruta_seleccionada.set(ruta)
    
    def generar_y_guardar(self):
        """Genera una contrase√±a y la guarda en la ruta seleccionada"""
        try:
            # Generar contrase√±a con la longitud especificada
            longitud = self.longitud_var.get()
            contrasena = self.generar_contrasena_personalizada(longitud)
            
            # Validar contrase√±a (solo longitud)
            longitud_minima = 1  # M√≠nimo absoluto
            es_valida, mensaje = validar_contrasena(contrasena, longitud_minima)
            
            # Mostrar resultado en la interfaz (sin validaci√≥n)
            self.mostrar_resultado(contrasena, es_valida, mensaje)
            
            if es_valida:
                # Guardar en archivo
                ruta_archivo = os.path.join(self.ruta_seleccionada.get(), "password.txt")
                self.guardar_contrasena(contrasena, ruta_archivo)
                self.ultima_contrasena = contrasena
                
                # Mensaje de √©xito simplificado
                messagebox.showinfo("‚úÖ √âxito", "¬°Contrase√±a lista para usar!")
            else:
                messagebox.showerror("‚ùå Error", "La contrase√±a generada no cumple con los requisitos")
                
        except Exception as e:
            messagebox.showerror("‚ùå Error", f"Error al generar contrase√±a: {str(e)}")
    
    def generar_contrasena_personalizada(self, longitud):
        """Genera una contrase√±a con longitud personalizada"""
        return generar_contrasena_personalizada(longitud)
    
    def mostrar_resultado(self, contrasena, es_valida, mensaje):
        """Muestra el resultado en el √°rea de texto"""
        self.resultado_text.config(state=tk.NORMAL)
        self.resultado_text.delete(1.0, tk.END)
        
        # Resultado sin validaci√≥n
        resultado = f"üîë CONTRASE√ëA GENERADA:\n"
        resultado += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        resultado += f"Contrase√±a: {contrasena}\n"
        resultado += f"Longitud: {len(contrasena)} caracteres\n"
        resultado += f"Generada: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        resultado += f"\nüìä CARACTER√çSTICAS:\n"
        resultado += f"‚Ä¢ Incluye may√∫sculas, min√∫sculas, n√∫meros y s√≠mbolos\n"
        resultado += f"‚Ä¢ Generaci√≥n completamente aleatoria\n"        
        resultado += f"\nüíæ Ruta de guardado:\n{self.ruta_seleccionada.get()}\n"
        resultado += f"\nüîê ¬°Contrase√±a lista para usar!"
        
        self.resultado_text.insert(1.0, resultado)
        self.resultado_text.config(state=tk.DISABLED)
    
    def guardar_contrasena(self, contrasena, ruta_archivo):
        """Guarda la contrase√±a en un archivo"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        contenido = "üîê CONTRASE√ëA GENERADA\n"
        contenido += "=" * 50 + "\n"
        contenido += f"Contrase√±a: {contrasena}\n"
        contenido += f"Longitud: {len(contrasena)} caracteres\n"
        contenido += f"Fecha de generaci√≥n: {timestamp}\n"
        contenido += "\nüìä CARACTER√çSTICAS:\n"
        contenido += "‚Ä¢ Incluye may√∫sculas, min√∫sculas, n√∫meros y s√≠mbolos\n"
        contenido += "‚Ä¢ Generaci√≥n completamente aleatoria\n"        
        
        with open(ruta_archivo, "w", encoding="utf-8") as archivo:
            archivo.write(contenido)
    
    def copiar_contrasena(self):
        """Copia la √∫ltima contrase√±a generada al portapapeles"""
        if self.ultima_contrasena:
            self.root.clipboard_clear()
            self.root.clipboard_append(self.ultima_contrasena)
            messagebox.showinfo("üìã Copiado", "Contrase√±a copiada al portapapeles")
        else:
            messagebox.showwarning("‚ö†Ô∏è Advertencia", "No hay contrase√±a para copiar. Genera una primero.")
    
    def abrir_carpeta(self):
        """Abre la carpeta donde se guardan las contrase√±as"""
        try:
            if os.name == 'nt':  # Windows
                os.startfile(self.ruta_seleccionada.get())
            elif os.name == 'posix':  # macOS/Linux
                os.system(f'open "{self.ruta_seleccionada.get()}"')
        except Exception as e:
            messagebox.showerror("‚ùå Error", f"No se pudo abrir la carpeta: {str(e)}")

def main():
    """Funci√≥n principal - puede ejecutar GUI o consola"""
    import sys
    
    # Si se pasa argumento --console, ejecuta en modo consola
    if len(sys.argv) > 1 and sys.argv[1] == "--console":
        main_consola()
    else:
        # Por defecto, ejecuta la interfaz gr√°fica
        main_gui()

def main_gui():
    """Ejecuta la interfaz gr√°fica"""
    root = tk.Tk()
    app = GeneradorContrasenaGUI(root)
    root.mainloop()

def main_consola():
    """Ejecuta en modo consola (funci√≥n original)"""
    print("üîê GENERADOR DE CONTRASE√ëAS")
    print("=" * 50)
    print("üìã Informaci√≥n:")
    print("‚Ä¢ Genera contrase√±as con variedad de caracteres")
    print("‚Ä¢ Validaci√≥n √∫nicamente por longitud")    
    print("=" * 50)
    
    # Generar contrase√±a
    contrasena = generar_contrasena()
    
    # Validar que cumple la longitud m√≠nima
    es_valida, mensaje = validar_contrasena(contrasena, 1)
    
    print(f"\nüîë Tu nueva contrase√±a es: {contrasena}")
    print(f"üìè Longitud: {len(contrasena)} caracteres")
    print(f"üîç Validaci√≥n: {mensaje}")
    
    if es_valida:
        # Guardar en archivo con informaci√≥n detallada
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        with open("password.txt", "w", encoding="utf-8") as archivo:
            archivo.write("üîê CONTRASE√ëA GENERADA\n")
            archivo.write("=" * 50 + "\n")
            archivo.write(f"Contrase√±a: {contrasena}\n")
            archivo.write(f"Longitud: {len(contrasena)} caracteres\n")
            archivo.write(f"Fecha de generaci√≥n: {timestamp}\n")
            archivo.write("\nüìä CARACTER√çSTICAS:\n")
            archivo.write("‚Ä¢ Incluye may√∫sculas, min√∫sculas, n√∫meros y s√≠mbolos\n")
            archivo.write("‚Ä¢ Generaci√≥n completamente aleatoria\n")                        
        
        print(f"üíæ Contrase√±a guardada en 'password.txt'")

    else:
        print("‚ùå Error: La contrase√±a generada no cumple")
        print("üîÑ Intenta ejecutar el programa nuevamente")


if __name__ == '__main__':
    main()